// This file is generated by rust-protobuf 3.6.0. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `uprotocol/uoptions.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_6_0;

// @@protoc_insertion_point(message:uprotocol.UServiceTopic)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UServiceTopic {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.UServiceTopic.id)
    pub id: u32,
    // @@protoc_insertion_point(field:uprotocol.UServiceTopic.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:uprotocol.UServiceTopic.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:uprotocol.UServiceTopic.resources)
    pub resources: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:uprotocol.UServiceTopic.permission_level)
    pub permission_level: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.UServiceTopic.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UServiceTopic {
    fn default() -> &'a UServiceTopic {
        <UServiceTopic as ::protobuf::Message>::default_instance()
    }
}

impl UServiceTopic {
    pub fn new() -> UServiceTopic {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UServiceTopic| { &m.id },
            |m: &mut UServiceTopic| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &UServiceTopic| { &m.name },
            |m: &mut UServiceTopic| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &UServiceTopic| { &m.message },
            |m: &mut UServiceTopic| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "resources",
            |m: &UServiceTopic| { &m.resources },
            |m: &mut UServiceTopic| { &mut m.resources },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "permission_level",
            |m: &UServiceTopic| { &m.permission_level },
            |m: &mut UServiceTopic| { &mut m.permission_level },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UServiceTopic>(
            "UServiceTopic",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UServiceTopic {
    const NAME: &'static str = "UServiceTopic";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.message = is.read_string()?;
                },
                34 => {
                    self.resources.push(is.read_string()?);
                },
                40 => {
                    self.permission_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        for value in &self.resources {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let Some(v) = self.permission_level {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        for v in &self.resources {
            os.write_string(4, &v)?;
        };
        if let Some(v) = self.permission_level {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UServiceTopic {
        UServiceTopic::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.message.clear();
        self.resources.clear();
        self.permission_level = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UServiceTopic {
        static instance: UServiceTopic = UServiceTopic {
            id: 0,
            name: ::std::string::String::new(),
            message: ::std::string::String::new(),
            resources: ::std::vec::Vec::new(),
            permission_level: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UServiceTopic {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UServiceTopic").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UServiceTopic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UServiceTopic {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Extension fields
pub mod exts {

    pub const file_someip: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FileOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(51000, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const service_id: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::ServiceOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51100, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const service_name: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::ServiceOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(51101, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const service_version_major: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::ServiceOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51102, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const service_version_minor: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::ServiceOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51103, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const service_permission_level: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::ServiceOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51104, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const publish_topic: ::protobuf::ext::ExtFieldRepeated<::protobuf::descriptor::ServiceOptions, super::UServiceTopic> = ::protobuf::ext::ExtFieldRepeated::new(51105, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const notification_topic: ::protobuf::ext::ExtFieldRepeated<::protobuf::descriptor::ServiceOptions, super::UServiceTopic> = ::protobuf::ext::ExtFieldRepeated::new(51106, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const service_someip: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::ServiceOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(51107, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const method_id: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MethodOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51200, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const method_permission_level: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MethodOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51201, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const message_someip: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(51300, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const message_size: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51301, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const field_size: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51400, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const field_key_size: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51401, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const field_count: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51402, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const enum_size: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(51500, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const enum_someip: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(51501, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const mime_type: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(51600, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const ce_name: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(51601, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18uprotocol/uoptions.proto\x12\tuprotocol\x1a\x20google/protobuf/des\
    criptor.proto\"\xb0\x01\n\rUServiceTopic\x12\x0e\n\x02id\x18\x01\x20\x01\
    (\rR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x18\n\x07me\
    ssage\x18\x03\x20\x01(\tR\x07message\x12\x1c\n\tresources\x18\x04\x20\
    \x03(\tR\tresources\x12.\n\x10permission_level\x18\x05\x20\x01(\rH\0R\
    \x0fpermissionLevel\x88\x01\x01B\x13\n\x11_permission_level:B\n\x0bfile_\
    someip\x18\xb8\x8e\x03\x20\x01(\x08\x12\x1c.google.protobuf.FileOptionsR\
    \nfileSomeip\x88\x01\x01:@\n\nservice_id\x18\x9c\x8f\x03\x20\x01(\r\x12\
    \x1f.google.protobuf.ServiceOptionsR\tserviceId:D\n\x0cservice_name\x18\
    \x9d\x8f\x03\x20\x01(\t\x12\x1f.google.protobuf.ServiceOptionsR\x0bservi\
    ceName:U\n\x15service_version_major\x18\x9e\x8f\x03\x20\x01(\r\x12\x1f.g\
    oogle.protobuf.ServiceOptionsR\x13serviceVersionMajor:X\n\x15service_ver\
    sion_minor\x18\x9f\x8f\x03\x20\x01(\r\x12\x1f.google.protobuf.ServiceOpt\
    ionsR\x13serviceVersionMinor\x88\x01\x01:^\n\x18service_permission_level\
    \x18\xa0\x8f\x03\x20\x01(\r\x12\x1f.google.protobuf.ServiceOptionsR\x16s\
    ervicePermissionLevel\x88\x01\x01:`\n\rpublish_topic\x18\xa1\x8f\x03\x20\
    \x03(\x0b2\x18.uprotocol.UServiceTopic\x12\x1f.google.protobuf.ServiceOp\
    tionsR\x0cpublishTopic:j\n\x12notification_topic\x18\xa2\x8f\x03\x20\x03\
    (\x0b2\x18.uprotocol.UServiceTopic\x12\x1f.google.protobuf.ServiceOption\
    sR\x11notificationTopic:K\n\x0eservice_someip\x18\xa3\x8f\x03\x20\x01(\
    \x08\x12\x1f.google.protobuf.ServiceOptionsR\rserviceSomeip\x88\x01\x01:\
    =\n\tmethod_id\x18\x80\x90\x03\x20\x01(\r\x12\x1e.google.protobuf.Method\
    OptionsR\x08methodId:[\n\x17method_permission_level\x18\x81\x90\x03\x20\
    \x01(\r\x12\x1e.google.protobuf.MethodOptionsR\x15methodPermissionLevel\
    \x88\x01\x01:K\n\x0emessage_someip\x18\xe4\x90\x03\x20\x01(\x08\x12\x1f.\
    google.protobuf.MessageOptionsR\rmessageSomeip\x88\x01\x01:G\n\x0cmessag\
    e_size\x18\xe5\x90\x03\x20\x01(\r\x12\x1f.google.protobuf.MessageOptions\
    R\x0bmessageSize\x88\x01\x01:A\n\nfield_size\x18\xc8\x91\x03\x20\x01(\r\
    \x12\x1d.google.protobuf.FieldOptionsR\tfieldSize\x88\x01\x01:H\n\x0efie\
    ld_key_size\x18\xc9\x91\x03\x20\x01(\r\x12\x1d.google.protobuf.FieldOpti\
    onsR\x0cfieldKeySize\x88\x01\x01:C\n\x0bfield_count\x18\xca\x91\x03\x20\
    \x01(\r\x12\x1d.google.protobuf.FieldOptionsR\nfieldCount\x88\x01\x01:>\
    \n\tenum_size\x18\xac\x92\x03\x20\x01(\r\x12\x1c.google.protobuf.EnumOpt\
    ionsR\x08enumSize\x88\x01\x01:B\n\x0benum_someip\x18\xad\x92\x03\x20\x01\
    (\x08\x12\x1c.google.protobuf.EnumOptionsR\nenumSomeip\x88\x01\x01:C\n\t\
    mime_type\x18\x90\x93\x03\x20\x01(\t\x12!.google.protobuf.EnumValueOptio\
    nsR\x08mimeType\x88\x01\x01:?\n\x07ce_name\x18\x91\x93\x03\x20\x01(\t\
    \x12!.google.protobuf.EnumValueOptionsR\x06ceName\x88\x01\x01B\x19\n\x15\
    org.eclipse.uprotocolP\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(UServiceTopic::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
