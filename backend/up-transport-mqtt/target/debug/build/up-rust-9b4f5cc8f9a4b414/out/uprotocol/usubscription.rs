// This file is generated by rust-protobuf 3.6.0. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `uprotocol/core/usubscription/v3/usubscription.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_6_0;

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.SubscribeAttributes)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubscribeAttributes {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscribeAttributes.expire)
    pub expire: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscribeAttributes.details)
    pub details: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscribeAttributes.sample_period_ms)
    pub sample_period_ms: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.SubscribeAttributes.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeAttributes {
    fn default() -> &'a SubscribeAttributes {
        <SubscribeAttributes as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeAttributes {
    pub fn new() -> SubscribeAttributes {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "expire",
            |m: &SubscribeAttributes| { &m.expire },
            |m: &mut SubscribeAttributes| { &mut m.expire },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "details",
            |m: &SubscribeAttributes| { &m.details },
            |m: &mut SubscribeAttributes| { &mut m.details },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sample_period_ms",
            |m: &SubscribeAttributes| { &m.sample_period_ms },
            |m: &mut SubscribeAttributes| { &mut m.sample_period_ms },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeAttributes>(
            "SubscribeAttributes",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeAttributes {
    const NAME: &'static str = "SubscribeAttributes";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.expire)?;
                },
                18 => {
                    self.details.push(is.read_message()?);
                },
                24 => {
                    self.sample_period_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.expire.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.details {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.sample_period_ms {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.expire.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.details {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.sample_period_ms {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeAttributes {
        SubscribeAttributes::new()
    }

    fn clear(&mut self) {
        self.expire.clear();
        self.details.clear();
        self.sample_period_ms = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeAttributes {
        static instance: SubscribeAttributes = SubscribeAttributes {
            expire: ::protobuf::MessageField::none(),
            details: ::std::vec::Vec::new(),
            sample_period_ms: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeAttributes {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeAttributes").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeAttributes {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.SubscriberInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubscriberInfo {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriberInfo.uri)
    pub uri: ::protobuf::MessageField<super::uri::UUri>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriberInfo.details)
    pub details: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.SubscriberInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscriberInfo {
    fn default() -> &'a SubscriberInfo {
        <SubscriberInfo as ::protobuf::Message>::default_instance()
    }
}

impl SubscriberInfo {
    pub fn new() -> SubscriberInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uri::UUri>(
            "uri",
            |m: &SubscriberInfo| { &m.uri },
            |m: &mut SubscriberInfo| { &mut m.uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "details",
            |m: &SubscriberInfo| { &m.details },
            |m: &mut SubscriberInfo| { &mut m.details },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscriberInfo>(
            "SubscriberInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscriberInfo {
    const NAME: &'static str = "SubscriberInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.uri)?;
                },
                18 => {
                    self.details.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.uri.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.details {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.uri.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.details {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscriberInfo {
        SubscriberInfo::new()
    }

    fn clear(&mut self) {
        self.uri.clear();
        self.details.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscriberInfo {
        static instance: SubscriberInfo = SubscriberInfo {
            uri: ::protobuf::MessageField::none(),
            details: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscriberInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscriberInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscriberInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriberInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.SubscriptionStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubscriptionStatus {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriptionStatus.state)
    pub state: ::protobuf::EnumOrUnknown<subscription_status::State>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriptionStatus.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.SubscriptionStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscriptionStatus {
    fn default() -> &'a SubscriptionStatus {
        <SubscriptionStatus as ::protobuf::Message>::default_instance()
    }
}

impl SubscriptionStatus {
    pub fn new() -> SubscriptionStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &SubscriptionStatus| { &m.state },
            |m: &mut SubscriptionStatus| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &SubscriptionStatus| { &m.message },
            |m: &mut SubscriptionStatus| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscriptionStatus>(
            "SubscriptionStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscriptionStatus {
    const NAME: &'static str = "SubscriptionStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(subscription_status::State::UNSUBSCRIBED) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(subscription_status::State::UNSUBSCRIBED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscriptionStatus {
        SubscriptionStatus::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(subscription_status::State::UNSUBSCRIBED);
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscriptionStatus {
        static instance: SubscriptionStatus = SubscriptionStatus {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscriptionStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscriptionStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscriptionStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriptionStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SubscriptionStatus`
pub mod subscription_status {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:uprotocol.core.usubscription.v3.SubscriptionStatus.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:uprotocol.core.usubscription.v3.SubscriptionStatus.State.UNSUBSCRIBED)
        UNSUBSCRIBED = 0,
        // @@protoc_insertion_point(enum_value:uprotocol.core.usubscription.v3.SubscriptionStatus.State.SUBSCRIBE_PENDING)
        SUBSCRIBE_PENDING = 1,
        // @@protoc_insertion_point(enum_value:uprotocol.core.usubscription.v3.SubscriptionStatus.State.SUBSCRIBED)
        SUBSCRIBED = 2,
        // @@protoc_insertion_point(enum_value:uprotocol.core.usubscription.v3.SubscriptionStatus.State.UNSUBSCRIBE_PENDING)
        UNSUBSCRIBE_PENDING = 3,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::UNSUBSCRIBED),
                1 => ::std::option::Option::Some(State::SUBSCRIBE_PENDING),
                2 => ::std::option::Option::Some(State::SUBSCRIBED),
                3 => ::std::option::Option::Some(State::UNSUBSCRIBE_PENDING),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "UNSUBSCRIBED" => ::std::option::Option::Some(State::UNSUBSCRIBED),
                "SUBSCRIBE_PENDING" => ::std::option::Option::Some(State::SUBSCRIBE_PENDING),
                "SUBSCRIBED" => ::std::option::Option::Some(State::SUBSCRIBED),
                "UNSUBSCRIBE_PENDING" => ::std::option::Option::Some(State::UNSUBSCRIBE_PENDING),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::UNSUBSCRIBED,
            State::SUBSCRIBE_PENDING,
            State::SUBSCRIBED,
            State::UNSUBSCRIBE_PENDING,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("SubscriptionStatus.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::UNSUBSCRIBED
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("SubscriptionStatus.State")
        }
    }
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.EventDeliveryConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventDeliveryConfig {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.EventDeliveryConfig.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.EventDeliveryConfig.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.EventDeliveryConfig.attributes)
    pub attributes: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.EventDeliveryConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EventDeliveryConfig {
    fn default() -> &'a EventDeliveryConfig {
        <EventDeliveryConfig as ::protobuf::Message>::default_instance()
    }
}

impl EventDeliveryConfig {
    pub fn new() -> EventDeliveryConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &EventDeliveryConfig| { &m.id },
            |m: &mut EventDeliveryConfig| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &EventDeliveryConfig| { &m.type_ },
            |m: &mut EventDeliveryConfig| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "attributes",
            |m: &EventDeliveryConfig| { &m.attributes },
            |m: &mut EventDeliveryConfig| { &mut m.attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EventDeliveryConfig>(
            "EventDeliveryConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EventDeliveryConfig {
    const NAME: &'static str = "EventDeliveryConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.attributes.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        for (k, v) in &self.attributes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        for (k, v) in &self.attributes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EventDeliveryConfig {
        EventDeliveryConfig::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.type_.clear();
        self.attributes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EventDeliveryConfig {
        static instance: ::protobuf::rt::Lazy<EventDeliveryConfig> = ::protobuf::rt::Lazy::new();
        instance.get(EventDeliveryConfig::new)
    }
}

impl ::protobuf::MessageFull for EventDeliveryConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EventDeliveryConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EventDeliveryConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventDeliveryConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.SubscriptionRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubscriptionRequest {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriptionRequest.topic)
    pub topic: ::protobuf::MessageField<super::uri::UUri>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriptionRequest.subscriber)
    pub subscriber: ::protobuf::MessageField<SubscriberInfo>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriptionRequest.attributes)
    pub attributes: ::protobuf::MessageField<SubscribeAttributes>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.SubscriptionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscriptionRequest {
    fn default() -> &'a SubscriptionRequest {
        <SubscriptionRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscriptionRequest {
    pub fn new() -> SubscriptionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uri::UUri>(
            "topic",
            |m: &SubscriptionRequest| { &m.topic },
            |m: &mut SubscriptionRequest| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscriberInfo>(
            "subscriber",
            |m: &SubscriptionRequest| { &m.subscriber },
            |m: &mut SubscriptionRequest| { &mut m.subscriber },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscribeAttributes>(
            "attributes",
            |m: &SubscriptionRequest| { &m.attributes },
            |m: &mut SubscriptionRequest| { &mut m.attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscriptionRequest>(
            "SubscriptionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscriptionRequest {
    const NAME: &'static str = "SubscriptionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.topic)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.subscriber)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.attributes)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.topic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.subscriber.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.topic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.subscriber.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.attributes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscriptionRequest {
        SubscriptionRequest::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.subscriber.clear();
        self.attributes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscriptionRequest {
        static instance: SubscriptionRequest = SubscriptionRequest {
            topic: ::protobuf::MessageField::none(),
            subscriber: ::protobuf::MessageField::none(),
            attributes: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscriptionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscriptionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscriptionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriptionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.SubscriptionResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubscriptionResponse {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriptionResponse.status)
    pub status: ::protobuf::MessageField<SubscriptionStatus>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriptionResponse.config)
    pub config: ::protobuf::MessageField<EventDeliveryConfig>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.SubscriptionResponse.topic)
    pub topic: ::protobuf::MessageField<super::uri::UUri>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.SubscriptionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscriptionResponse {
    fn default() -> &'a SubscriptionResponse {
        <SubscriptionResponse as ::protobuf::Message>::default_instance()
    }
}

impl SubscriptionResponse {
    pub fn new() -> SubscriptionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscriptionStatus>(
            "status",
            |m: &SubscriptionResponse| { &m.status },
            |m: &mut SubscriptionResponse| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EventDeliveryConfig>(
            "config",
            |m: &SubscriptionResponse| { &m.config },
            |m: &mut SubscriptionResponse| { &mut m.config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uri::UUri>(
            "topic",
            |m: &SubscriptionResponse| { &m.topic },
            |m: &mut SubscriptionResponse| { &mut m.topic },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscriptionResponse>(
            "SubscriptionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscriptionResponse {
    const NAME: &'static str = "SubscriptionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.config)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.topic)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.topic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.topic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscriptionResponse {
        SubscriptionResponse::new()
    }

    fn clear(&mut self) {
        self.status.clear();
        self.config.clear();
        self.topic.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscriptionResponse {
        static instance: SubscriptionResponse = SubscriptionResponse {
            status: ::protobuf::MessageField::none(),
            config: ::protobuf::MessageField::none(),
            topic: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscriptionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscriptionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscriptionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriptionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.UnsubscribeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnsubscribeRequest {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.UnsubscribeRequest.topic)
    pub topic: ::protobuf::MessageField<super::uri::UUri>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.UnsubscribeRequest.subscriber)
    pub subscriber: ::protobuf::MessageField<SubscriberInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.UnsubscribeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnsubscribeRequest {
    fn default() -> &'a UnsubscribeRequest {
        <UnsubscribeRequest as ::protobuf::Message>::default_instance()
    }
}

impl UnsubscribeRequest {
    pub fn new() -> UnsubscribeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uri::UUri>(
            "topic",
            |m: &UnsubscribeRequest| { &m.topic },
            |m: &mut UnsubscribeRequest| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscriberInfo>(
            "subscriber",
            |m: &UnsubscribeRequest| { &m.subscriber },
            |m: &mut UnsubscribeRequest| { &mut m.subscriber },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnsubscribeRequest>(
            "UnsubscribeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnsubscribeRequest {
    const NAME: &'static str = "UnsubscribeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.topic)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.subscriber)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.topic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.subscriber.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.topic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.subscriber.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnsubscribeRequest {
        UnsubscribeRequest::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.subscriber.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnsubscribeRequest {
        static instance: UnsubscribeRequest = UnsubscribeRequest {
            topic: ::protobuf::MessageField::none(),
            subscriber: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnsubscribeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnsubscribeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnsubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsubscribeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.UnsubscribeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnsubscribeResponse {
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.UnsubscribeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnsubscribeResponse {
    fn default() -> &'a UnsubscribeResponse {
        <UnsubscribeResponse as ::protobuf::Message>::default_instance()
    }
}

impl UnsubscribeResponse {
    pub fn new() -> UnsubscribeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnsubscribeResponse>(
            "UnsubscribeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnsubscribeResponse {
    const NAME: &'static str = "UnsubscribeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnsubscribeResponse {
        UnsubscribeResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnsubscribeResponse {
        static instance: UnsubscribeResponse = UnsubscribeResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnsubscribeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnsubscribeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnsubscribeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsubscribeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FetchSubscribersRequest {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.FetchSubscribersRequest.topic)
    pub topic: ::protobuf::MessageField<super::uri::UUri>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.FetchSubscribersRequest.offset)
    pub offset: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.FetchSubscribersRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FetchSubscribersRequest {
    fn default() -> &'a FetchSubscribersRequest {
        <FetchSubscribersRequest as ::protobuf::Message>::default_instance()
    }
}

impl FetchSubscribersRequest {
    pub fn new() -> FetchSubscribersRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uri::UUri>(
            "topic",
            |m: &FetchSubscribersRequest| { &m.topic },
            |m: &mut FetchSubscribersRequest| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "offset",
            |m: &FetchSubscribersRequest| { &m.offset },
            |m: &mut FetchSubscribersRequest| { &mut m.offset },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FetchSubscribersRequest>(
            "FetchSubscribersRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FetchSubscribersRequest {
    const NAME: &'static str = "FetchSubscribersRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.topic)?;
                },
                16 => {
                    self.offset = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.topic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.topic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.offset {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FetchSubscribersRequest {
        FetchSubscribersRequest::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.offset = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FetchSubscribersRequest {
        static instance: FetchSubscribersRequest = FetchSubscribersRequest {
            topic: ::protobuf::MessageField::none(),
            offset: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FetchSubscribersRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FetchSubscribersRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FetchSubscribersRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FetchSubscribersRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FetchSubscribersResponse {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.FetchSubscribersResponse.subscribers)
    pub subscribers: ::std::vec::Vec<SubscriberInfo>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.FetchSubscribersResponse.has_more_records)
    pub has_more_records: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.FetchSubscribersResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FetchSubscribersResponse {
    fn default() -> &'a FetchSubscribersResponse {
        <FetchSubscribersResponse as ::protobuf::Message>::default_instance()
    }
}

impl FetchSubscribersResponse {
    pub fn new() -> FetchSubscribersResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "subscribers",
            |m: &FetchSubscribersResponse| { &m.subscribers },
            |m: &mut FetchSubscribersResponse| { &mut m.subscribers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_more_records",
            |m: &FetchSubscribersResponse| { &m.has_more_records },
            |m: &mut FetchSubscribersResponse| { &mut m.has_more_records },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FetchSubscribersResponse>(
            "FetchSubscribersResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FetchSubscribersResponse {
    const NAME: &'static str = "FetchSubscribersResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.subscribers.push(is.read_message()?);
                },
                16 => {
                    self.has_more_records = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.subscribers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.has_more_records {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.subscribers {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.has_more_records {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FetchSubscribersResponse {
        FetchSubscribersResponse::new()
    }

    fn clear(&mut self) {
        self.subscribers.clear();
        self.has_more_records = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FetchSubscribersResponse {
        static instance: FetchSubscribersResponse = FetchSubscribersResponse {
            subscribers: ::std::vec::Vec::new(),
            has_more_records: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FetchSubscribersResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FetchSubscribersResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FetchSubscribersResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FetchSubscribersResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.Subscription)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Subscription {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Subscription.topic)
    pub topic: ::protobuf::MessageField<super::uri::UUri>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Subscription.subscriber)
    pub subscriber: ::protobuf::MessageField<SubscriberInfo>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Subscription.status)
    pub status: ::protobuf::MessageField<SubscriptionStatus>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Subscription.attributes)
    pub attributes: ::protobuf::MessageField<SubscribeAttributes>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Subscription.config)
    pub config: ::protobuf::MessageField<EventDeliveryConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.Subscription.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Subscription {
    fn default() -> &'a Subscription {
        <Subscription as ::protobuf::Message>::default_instance()
    }
}

impl Subscription {
    pub fn new() -> Subscription {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uri::UUri>(
            "topic",
            |m: &Subscription| { &m.topic },
            |m: &mut Subscription| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscriberInfo>(
            "subscriber",
            |m: &Subscription| { &m.subscriber },
            |m: &mut Subscription| { &mut m.subscriber },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscriptionStatus>(
            "status",
            |m: &Subscription| { &m.status },
            |m: &mut Subscription| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscribeAttributes>(
            "attributes",
            |m: &Subscription| { &m.attributes },
            |m: &mut Subscription| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EventDeliveryConfig>(
            "config",
            |m: &Subscription| { &m.config },
            |m: &mut Subscription| { &mut m.config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Subscription>(
            "Subscription",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Subscription {
    const NAME: &'static str = "Subscription";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.topic)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.subscriber)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.attributes)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.topic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.subscriber.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.topic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.subscriber.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.attributes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Subscription {
        Subscription::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.subscriber.clear();
        self.status.clear();
        self.attributes.clear();
        self.config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Subscription {
        static instance: Subscription = Subscription {
            topic: ::protobuf::MessageField::none(),
            subscriber: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            attributes: ::protobuf::MessageField::none(),
            config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Subscription {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Subscription").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Subscription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Subscription {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FetchSubscriptionsRequest {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest.offset)
    pub offset: ::std::option::Option<u32>,
    // message oneof groups
    pub request: ::std::option::Option<fetch_subscriptions_request::Request>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FetchSubscriptionsRequest {
    fn default() -> &'a FetchSubscriptionsRequest {
        <FetchSubscriptionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl FetchSubscriptionsRequest {
    pub fn new() -> FetchSubscriptionsRequest {
        ::std::default::Default::default()
    }

    // .uprotocol.v1.UUri topic = 1;

    pub fn topic(&self) -> &super::uri::UUri {
        match self.request {
            ::std::option::Option::Some(fetch_subscriptions_request::Request::Topic(ref v)) => v,
            _ => <super::uri::UUri as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_topic(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_topic(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(fetch_subscriptions_request::Request::Topic(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: super::uri::UUri) {
        self.request = ::std::option::Option::Some(fetch_subscriptions_request::Request::Topic(v))
    }

    // Mutable pointer to the field.
    pub fn mut_topic(&mut self) -> &mut super::uri::UUri {
        if let ::std::option::Option::Some(fetch_subscriptions_request::Request::Topic(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(fetch_subscriptions_request::Request::Topic(super::uri::UUri::new()));
        }
        match self.request {
            ::std::option::Option::Some(fetch_subscriptions_request::Request::Topic(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_topic(&mut self) -> super::uri::UUri {
        if self.has_topic() {
            match self.request.take() {
                ::std::option::Option::Some(fetch_subscriptions_request::Request::Topic(v)) => v,
                _ => panic!(),
            }
        } else {
            super::uri::UUri::new()
        }
    }

    // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;

    pub fn subscriber(&self) -> &SubscriberInfo {
        match self.request {
            ::std::option::Option::Some(fetch_subscriptions_request::Request::Subscriber(ref v)) => v,
            _ => <SubscriberInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_subscriber(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_subscriber(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(fetch_subscriptions_request::Request::Subscriber(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_subscriber(&mut self, v: SubscriberInfo) {
        self.request = ::std::option::Option::Some(fetch_subscriptions_request::Request::Subscriber(v))
    }

    // Mutable pointer to the field.
    pub fn mut_subscriber(&mut self) -> &mut SubscriberInfo {
        if let ::std::option::Option::Some(fetch_subscriptions_request::Request::Subscriber(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(fetch_subscriptions_request::Request::Subscriber(SubscriberInfo::new()));
        }
        match self.request {
            ::std::option::Option::Some(fetch_subscriptions_request::Request::Subscriber(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_subscriber(&mut self) -> SubscriberInfo {
        if self.has_subscriber() {
            match self.request.take() {
                ::std::option::Option::Some(fetch_subscriptions_request::Request::Subscriber(v)) => v,
                _ => panic!(),
            }
        } else {
            SubscriberInfo::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::uri::UUri>(
            "topic",
            FetchSubscriptionsRequest::has_topic,
            FetchSubscriptionsRequest::topic,
            FetchSubscriptionsRequest::mut_topic,
            FetchSubscriptionsRequest::set_topic,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SubscriberInfo>(
            "subscriber",
            FetchSubscriptionsRequest::has_subscriber,
            FetchSubscriptionsRequest::subscriber,
            FetchSubscriptionsRequest::mut_subscriber,
            FetchSubscriptionsRequest::set_subscriber,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "offset",
            |m: &FetchSubscriptionsRequest| { &m.offset },
            |m: &mut FetchSubscriptionsRequest| { &mut m.offset },
        ));
        oneofs.push(fetch_subscriptions_request::Request::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FetchSubscriptionsRequest>(
            "FetchSubscriptionsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FetchSubscriptionsRequest {
    const NAME: &'static str = "FetchSubscriptionsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.request = ::std::option::Option::Some(fetch_subscriptions_request::Request::Topic(is.read_message()?));
                },
                18 => {
                    self.request = ::std::option::Option::Some(fetch_subscriptions_request::Request::Subscriber(is.read_message()?));
                },
                24 => {
                    self.offset = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &fetch_subscriptions_request::Request::Topic(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fetch_subscriptions_request::Request::Subscriber(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.offset {
            os.write_uint32(3, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &fetch_subscriptions_request::Request::Topic(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &fetch_subscriptions_request::Request::Subscriber(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FetchSubscriptionsRequest {
        FetchSubscriptionsRequest::new()
    }

    fn clear(&mut self) {
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.offset = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FetchSubscriptionsRequest {
        static instance: FetchSubscriptionsRequest = FetchSubscriptionsRequest {
            offset: ::std::option::Option::None,
            request: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FetchSubscriptionsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FetchSubscriptionsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FetchSubscriptionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FetchSubscriptionsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FetchSubscriptionsRequest`
pub mod fetch_subscriptions_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest.request)
    pub enum Request {
        // @@protoc_insertion_point(oneof_field:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest.topic)
        Topic(super::super::uri::UUri),
        // @@protoc_insertion_point(oneof_field:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest.subscriber)
        Subscriber(super::SubscriberInfo),
    }

    impl ::protobuf::Oneof for Request {
    }

    impl ::protobuf::OneofFull for Request {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FetchSubscriptionsRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("request").unwrap()).clone()
        }
    }

    impl Request {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Request>("request")
        }
    }
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FetchSubscriptionsResponse {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse.subscriptions)
    pub subscriptions: ::std::vec::Vec<Subscription>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse.has_more_records)
    pub has_more_records: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FetchSubscriptionsResponse {
    fn default() -> &'a FetchSubscriptionsResponse {
        <FetchSubscriptionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl FetchSubscriptionsResponse {
    pub fn new() -> FetchSubscriptionsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "subscriptions",
            |m: &FetchSubscriptionsResponse| { &m.subscriptions },
            |m: &mut FetchSubscriptionsResponse| { &mut m.subscriptions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_more_records",
            |m: &FetchSubscriptionsResponse| { &m.has_more_records },
            |m: &mut FetchSubscriptionsResponse| { &mut m.has_more_records },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FetchSubscriptionsResponse>(
            "FetchSubscriptionsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FetchSubscriptionsResponse {
    const NAME: &'static str = "FetchSubscriptionsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.subscriptions.push(is.read_message()?);
                },
                16 => {
                    self.has_more_records = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.subscriptions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.has_more_records {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.subscriptions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.has_more_records {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FetchSubscriptionsResponse {
        FetchSubscriptionsResponse::new()
    }

    fn clear(&mut self) {
        self.subscriptions.clear();
        self.has_more_records = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FetchSubscriptionsResponse {
        static instance: FetchSubscriptionsResponse = FetchSubscriptionsResponse {
            subscriptions: ::std::vec::Vec::new(),
            has_more_records: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FetchSubscriptionsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FetchSubscriptionsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FetchSubscriptionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FetchSubscriptionsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.NotificationsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NotificationsRequest {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.NotificationsRequest.topic)
    pub topic: ::protobuf::MessageField<super::uri::UUri>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.NotificationsRequest.subscriber)
    pub subscriber: ::protobuf::MessageField<SubscriberInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.NotificationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotificationsRequest {
    fn default() -> &'a NotificationsRequest {
        <NotificationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl NotificationsRequest {
    pub fn new() -> NotificationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uri::UUri>(
            "topic",
            |m: &NotificationsRequest| { &m.topic },
            |m: &mut NotificationsRequest| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscriberInfo>(
            "subscriber",
            |m: &NotificationsRequest| { &m.subscriber },
            |m: &mut NotificationsRequest| { &mut m.subscriber },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotificationsRequest>(
            "NotificationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotificationsRequest {
    const NAME: &'static str = "NotificationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.topic)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.subscriber)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.topic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.subscriber.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.topic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.subscriber.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotificationsRequest {
        NotificationsRequest::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.subscriber.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotificationsRequest {
        static instance: NotificationsRequest = NotificationsRequest {
            topic: ::protobuf::MessageField::none(),
            subscriber: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NotificationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotificationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotificationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotificationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.NotificationsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NotificationsResponse {
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.NotificationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotificationsResponse {
    fn default() -> &'a NotificationsResponse {
        <NotificationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl NotificationsResponse {
    pub fn new() -> NotificationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotificationsResponse>(
            "NotificationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotificationsResponse {
    const NAME: &'static str = "NotificationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotificationsResponse {
        NotificationsResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotificationsResponse {
        static instance: NotificationsResponse = NotificationsResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NotificationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotificationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotificationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotificationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.Update)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Update {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Update.topic)
    pub topic: ::protobuf::MessageField<super::uri::UUri>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Update.subscriber)
    pub subscriber: ::protobuf::MessageField<SubscriberInfo>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Update.status)
    pub status: ::protobuf::MessageField<SubscriptionStatus>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.Update.attributes)
    pub attributes: ::protobuf::MessageField<SubscribeAttributes>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.Update.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Update {
    fn default() -> &'a Update {
        <Update as ::protobuf::Message>::default_instance()
    }
}

impl Update {
    pub fn new() -> Update {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uri::UUri>(
            "topic",
            |m: &Update| { &m.topic },
            |m: &mut Update| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscriberInfo>(
            "subscriber",
            |m: &Update| { &m.subscriber },
            |m: &mut Update| { &mut m.subscriber },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscriptionStatus>(
            "status",
            |m: &Update| { &m.status },
            |m: &mut Update| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SubscribeAttributes>(
            "attributes",
            |m: &Update| { &m.attributes },
            |m: &mut Update| { &mut m.attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Update>(
            "Update",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Update {
    const NAME: &'static str = "Update";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.topic)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.subscriber)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.attributes)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.topic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.subscriber.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.topic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.subscriber.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.attributes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Update {
        Update::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.subscriber.clear();
        self.status.clear();
        self.attributes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Update {
        static instance: Update = Update {
            topic: ::protobuf::MessageField::none(),
            subscriber: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            attributes: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Update {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Update").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Update {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Update {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Update`
pub mod update {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:uprotocol.core.usubscription.v3.Update.Resources)
    pub enum Resources {
        // @@protoc_insertion_point(enum_value:uprotocol.core.usubscription.v3.Update.Resources.subscriptions)
        subscriptions = 0,
    }

    impl ::protobuf::Enum for Resources {
        const NAME: &'static str = "Resources";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Resources> {
            match value {
                0 => ::std::option::Option::Some(Resources::subscriptions),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Resources> {
            match str {
                "subscriptions" => ::std::option::Option::Some(Resources::subscriptions),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Resources] = &[
            Resources::subscriptions,
        ];
    }

    impl ::protobuf::EnumFull for Resources {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Update.Resources").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Resources {
        fn default() -> Self {
            Resources::subscriptions
        }
    }

    impl Resources {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Resources>("Update.Resources")
        }
    }
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.PassiveMode)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PassiveMode {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.PassiveMode.enable)
    pub enable: bool,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.PassiveMode.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PassiveMode {
    fn default() -> &'a PassiveMode {
        <PassiveMode as ::protobuf::Message>::default_instance()
    }
}

impl PassiveMode {
    pub fn new() -> PassiveMode {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enable",
            |m: &PassiveMode| { &m.enable },
            |m: &mut PassiveMode| { &mut m.enable },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PassiveMode>(
            "PassiveMode",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PassiveMode {
    const NAME: &'static str = "PassiveMode";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.enable = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.enable != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.enable != false {
            os.write_bool(1, self.enable)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PassiveMode {
        PassiveMode::new()
    }

    fn clear(&mut self) {
        self.enable = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PassiveMode {
        static instance: PassiveMode = PassiveMode {
            enable: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PassiveMode {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PassiveMode").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PassiveMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PassiveMode {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.ResetRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResetRequest {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.ResetRequest.reason)
    pub reason: ::protobuf::MessageField<reset_request::Reason>,
    // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.ResetRequest.before)
    pub before: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.ResetRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResetRequest {
    fn default() -> &'a ResetRequest {
        <ResetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ResetRequest {
    pub fn new() -> ResetRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, reset_request::Reason>(
            "reason",
            |m: &ResetRequest| { &m.reason },
            |m: &mut ResetRequest| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "before",
            |m: &ResetRequest| { &m.before },
            |m: &mut ResetRequest| { &mut m.before },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResetRequest>(
            "ResetRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResetRequest {
    const NAME: &'static str = "ResetRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reason)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.before)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reason.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.before.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reason.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.before.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResetRequest {
        ResetRequest::new()
    }

    fn clear(&mut self) {
        self.reason.clear();
        self.before.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResetRequest {
        static instance: ResetRequest = ResetRequest {
            reason: ::protobuf::MessageField::none(),
            before: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResetRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResetRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResetRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ResetRequest`
pub mod reset_request {
    // @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.ResetRequest.Reason)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Reason {
        // message fields
        // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.ResetRequest.Reason.code)
        pub code: ::protobuf::EnumOrUnknown<reason::Code>,
        // @@protoc_insertion_point(field:uprotocol.core.usubscription.v3.ResetRequest.Reason.message)
        pub message: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.ResetRequest.Reason.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Reason {
        fn default() -> &'a Reason {
            <Reason as ::protobuf::Message>::default_instance()
        }
    }

    impl Reason {
        pub fn new() -> Reason {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "code",
                |m: &Reason| { &m.code },
                |m: &mut Reason| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "message",
                |m: &Reason| { &m.message },
                |m: &mut Reason| { &mut m.message },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Reason>(
                "ResetRequest.Reason",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Reason {
        const NAME: &'static str = "Reason";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.code = is.read_enum_or_unknown()?;
                    },
                    18 => {
                        self.message = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.code != ::protobuf::EnumOrUnknown::new(reason::Code::UNSPECIFIED) {
                my_size += ::protobuf::rt::int32_size(1, self.code.value());
            }
            if let Some(v) = self.message.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.code != ::protobuf::EnumOrUnknown::new(reason::Code::UNSPECIFIED) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.code))?;
            }
            if let Some(v) = self.message.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Reason {
            Reason::new()
        }

        fn clear(&mut self) {
            self.code = ::protobuf::EnumOrUnknown::new(reason::Code::UNSPECIFIED);
            self.message = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Reason {
            static instance: Reason = Reason {
                code: ::protobuf::EnumOrUnknown::from_i32(0),
                message: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Reason {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ResetRequest.Reason").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Reason {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Reason {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Reason`
    pub mod reason {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:uprotocol.core.usubscription.v3.ResetRequest.Reason.Code)
        pub enum Code {
            // @@protoc_insertion_point(enum_value:uprotocol.core.usubscription.v3.ResetRequest.Reason.Code.UNSPECIFIED)
            UNSPECIFIED = 0,
            // @@protoc_insertion_point(enum_value:uprotocol.core.usubscription.v3.ResetRequest.Reason.Code.FACTORY_RESET)
            FACTORY_RESET = 1,
            // @@protoc_insertion_point(enum_value:uprotocol.core.usubscription.v3.ResetRequest.Reason.Code.CORRUPTED_DATA)
            CORRUPTED_DATA = 2,
        }

        impl ::protobuf::Enum for Code {
            const NAME: &'static str = "Code";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Code> {
                match value {
                    0 => ::std::option::Option::Some(Code::UNSPECIFIED),
                    1 => ::std::option::Option::Some(Code::FACTORY_RESET),
                    2 => ::std::option::Option::Some(Code::CORRUPTED_DATA),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<Code> {
                match str {
                    "UNSPECIFIED" => ::std::option::Option::Some(Code::UNSPECIFIED),
                    "FACTORY_RESET" => ::std::option::Option::Some(Code::FACTORY_RESET),
                    "CORRUPTED_DATA" => ::std::option::Option::Some(Code::CORRUPTED_DATA),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Code] = &[
                Code::UNSPECIFIED,
                Code::FACTORY_RESET,
                Code::CORRUPTED_DATA,
            ];
        }

        impl ::protobuf::EnumFull for Code {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("ResetRequest.Reason.Code").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for Code {
            fn default() -> Self {
                Code::UNSPECIFIED
            }
        }

        impl Code {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Code>("ResetRequest.Reason.Code")
            }
        }
    }
}

// @@protoc_insertion_point(message:uprotocol.core.usubscription.v3.ResetResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResetResponse {
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.core.usubscription.v3.ResetResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResetResponse {
    fn default() -> &'a ResetResponse {
        <ResetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ResetResponse {
    pub fn new() -> ResetResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResetResponse>(
            "ResetResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResetResponse {
    const NAME: &'static str = "ResetResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResetResponse {
        ResetResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResetResponse {
        static instance: ResetResponse = ResetResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResetResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResetResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResetResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3uprotocol/core/usubscription/v3/usubscription.proto\x12\x1fuprotocol.\
    core.usubscription.v3\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/pro\
    tobuf/timestamp.proto\x1a\x16uprotocol/v1/uri.proto\x1a\x18uprotocol/uop\
    tions.proto\"\xbd\x01\n\x13SubscribeAttributes\x122\n\x06expire\x18\x01\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x06expire\x12.\n\x07detail\
    s\x18\x02\x20\x03(\x0b2\x14.google.protobuf.AnyR\x07details\x12-\n\x10sa\
    mple_period_ms\x18\x03\x20\x01(\rH\0R\x0esamplePeriodMs\x88\x01\x01B\x13\
    \n\x11_sample_period_ms\"f\n\x0eSubscriberInfo\x12$\n\x03uri\x18\x01\x20\
    \x01(\x0b2\x12.uprotocol.v1.UUriR\x03uri\x12.\n\x07details\x18\x02\x20\
    \x03(\x0b2\x14.google.protobuf.AnyR\x07details\"\xe0\x01\n\x12Subscripti\
    onStatus\x12O\n\x05state\x18\x01\x20\x01(\x0e29.uprotocol.core.usubscrip\
    tion.v3.SubscriptionStatus.StateR\x05state\x12\x18\n\x07message\x18\x03\
    \x20\x01(\tR\x07message\"Y\n\x05State\x12\x10\n\x0cUNSUBSCRIBED\x10\0\
    \x12\x15\n\x11SUBSCRIBE_PENDING\x10\x01\x12\x0e\n\nSUBSCRIBED\x10\x02\
    \x12\x17\n\x13UNSUBSCRIBE_PENDING\x10\x03J\x04\x08\x02\x10\x03\"\xf4\x01\
    \n\x13EventDeliveryConfig\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    \x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12d\n\nattributes\x18\x03\
    \x20\x03(\x0b2D.uprotocol.core.usubscription.v3.EventDeliveryConfig.Attr\
    ibutesEntryR\nattributes\x1aS\n\x0fAttributesEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12*\n\x05value\x18\x02\x20\x01(\x0b2\x14.google\
    .protobuf.AnyR\x05value:\x028\x01\"\xe6\x01\n\x13SubscriptionRequest\x12\
    (\n\x05topic\x18\x01\x20\x01(\x0b2\x12.uprotocol.v1.UUriR\x05topic\x12O\
    \n\nsubscriber\x18\x02\x20\x01(\x0b2/.uprotocol.core.usubscription.v3.Su\
    bscriberInfoR\nsubscriber\x12T\n\nattributes\x18\x03\x20\x01(\x0b24.upro\
    tocol.core.usubscription.v3.SubscribeAttributesR\nattributes\"\xdb\x01\n\
    \x14SubscriptionResponse\x12K\n\x06status\x18\x01\x20\x01(\x0b23.uprotoc\
    ol.core.usubscription.v3.SubscriptionStatusR\x06status\x12L\n\x06config\
    \x18\x02\x20\x01(\x0b24.uprotocol.core.usubscription.v3.EventDeliveryCon\
    figR\x06config\x12(\n\x05topic\x18\x03\x20\x01(\x0b2\x12.uprotocol.v1.UU\
    riR\x05topic\"\x8f\x01\n\x12UnsubscribeRequest\x12(\n\x05topic\x18\x01\
    \x20\x01(\x0b2\x12.uprotocol.v1.UUriR\x05topic\x12O\n\nsubscriber\x18\
    \x02\x20\x01(\x0b2/.uprotocol.core.usubscription.v3.SubscriberInfoR\nsub\
    scriber\"\x15\n\x13UnsubscribeResponse\"k\n\x17FetchSubscribersRequest\
    \x12(\n\x05topic\x18\x01\x20\x01(\x0b2\x12.uprotocol.v1.UUriR\x05topic\
    \x12\x1b\n\x06offset\x18\x02\x20\x01(\rH\0R\x06offset\x88\x01\x01B\t\n\
    \x07_offset\"\xb7\x01\n\x18FetchSubscribersResponse\x12Q\n\x0bsubscriber\
    s\x18\x01\x20\x03(\x0b2/.uprotocol.core.usubscription.v3.SubscriberInfoR\
    \x0bsubscribers\x12-\n\x10has_more_records\x18\x02\x20\x01(\x08H\0R\x0eh\
    asMoreRecords\x88\x01\x01B\x13\n\x11_has_more_recordsJ\x04\x08\x03\x10\
    \x04\"\xfa\x02\n\x0cSubscription\x12(\n\x05topic\x18\x01\x20\x01(\x0b2\
    \x12.uprotocol.v1.UUriR\x05topic\x12O\n\nsubscriber\x18\x02\x20\x01(\x0b\
    2/.uprotocol.core.usubscription.v3.SubscriberInfoR\nsubscriber\x12K\n\
    \x06status\x18\x03\x20\x01(\x0b23.uprotocol.core.usubscription.v3.Subscr\
    iptionStatusR\x06status\x12T\n\nattributes\x18\x04\x20\x01(\x0b24.uproto\
    col.core.usubscription.v3.SubscribeAttributesR\nattributes\x12L\n\x06con\
    fig\x18\x05\x20\x01(\x0b24.uprotocol.core.usubscription.v3.EventDelivery\
    ConfigR\x06config\"\xcd\x01\n\x19FetchSubscriptionsRequest\x12*\n\x05top\
    ic\x18\x01\x20\x01(\x0b2\x12.uprotocol.v1.UUriH\0R\x05topic\x12Q\n\nsubs\
    criber\x18\x02\x20\x01(\x0b2/.uprotocol.core.usubscription.v3.Subscriber\
    InfoH\0R\nsubscriber\x12\x1b\n\x06offset\x18\x03\x20\x01(\rH\x01R\x06off\
    set\x88\x01\x01B\t\n\x07requestB\t\n\x07_offset\"\xb5\x01\n\x1aFetchSubs\
    criptionsResponse\x12S\n\rsubscriptions\x18\x01\x20\x03(\x0b2-.uprotocol\
    .core.usubscription.v3.SubscriptionR\rsubscriptions\x12-\n\x10has_more_r\
    ecords\x18\x02\x20\x01(\x08H\0R\x0ehasMoreRecords\x88\x01\x01B\x13\n\x11\
    _has_more_records\"\x91\x01\n\x14NotificationsRequest\x12(\n\x05topic\
    \x18\x01\x20\x01(\x0b2\x12.uprotocol.v1.UUriR\x05topic\x12O\n\nsubscribe\
    r\x18\x02\x20\x01(\x0b2/.uprotocol.core.usubscription.v3.SubscriberInfoR\
    \nsubscriber\"\x17\n\x15NotificationsResponse\"\xc6\x02\n\x06Update\x12(\
    \n\x05topic\x18\x01\x20\x01(\x0b2\x12.uprotocol.v1.UUriR\x05topic\x12O\n\
    \nsubscriber\x18\x02\x20\x01(\x0b2/.uprotocol.core.usubscription.v3.Subs\
    criberInfoR\nsubscriber\x12K\n\x06status\x18\x03\x20\x01(\x0b23.uprotoco\
    l.core.usubscription.v3.SubscriptionStatusR\x06status\x12T\n\nattributes\
    \x18\x04\x20\x01(\x0b24.uprotocol.core.usubscription.v3.SubscribeAttribu\
    tesR\nattributes\"\x1e\n\tResources\x12\x11\n\rsubscriptions\x10\0\"%\n\
    \x0bPassiveMode\x12\x16\n\x06enable\x18\x01\x20\x01(\x08R\x06enable\"\
    \xf5\x02\n\x0cResetRequest\x12Q\n\x06reason\x18\x01\x20\x01(\x0b24.uprot\
    ocol.core.usubscription.v3.ResetRequest.ReasonH\0R\x06reason\x88\x01\x01\
    \x127\n\x06before\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampH\
    \x01R\x06before\x88\x01\x01\x1a\xc2\x01\n\x06Reason\x12M\n\x04code\x18\
    \x01\x20\x01(\x0e29.uprotocol.core.usubscription.v3.ResetRequest.Reason.\
    CodeR\x04code\x12\x1d\n\x07message\x18\x02\x20\x01(\tH\0R\x07message\x88\
    \x01\x01\">\n\x04Code\x12\x0f\n\x0bUNSPECIFIED\x10\0\x12\x11\n\rFACTORY_\
    RESET\x10\x01\x12\x12\n\x0eCORRUPTED_DATA\x10\x02B\n\n\x08_messageB\t\n\
    \x07_reasonB\t\n\x07_before\"\x0f\n\rResetResponse2\x91\x08\n\ruSubscrip\
    tion\x12~\n\tSubscribe\x124.uprotocol.core.usubscription.v3.Subscription\
    Request\x1a5.uprotocol.core.usubscription.v3.SubscriptionResponse\"\x04\
    \x80\x80\x19\x01\x12~\n\x0bUnsubscribe\x123.uprotocol.core.usubscription\
    .v3.UnsubscribeRequest\x1a4.uprotocol.core.usubscription.v3.UnsubscribeR\
    esponse\"\x04\x80\x80\x19\x02\x12\x93\x01\n\x12FetchSubscriptions\x12:.u\
    protocol.core.usubscription.v3.FetchSubscriptionsRequest\x1a;.uprotocol.\
    core.usubscription.v3.FetchSubscriptionsResponse\"\x04\x80\x80\x19\x03\
    \x12\x8f\x01\n\x18RegisterForNotifications\x125.uprotocol.core.usubscrip\
    tion.v3.NotificationsRequest\x1a6.uprotocol.core.usubscription.v3.Notifi\
    cationsResponse\"\x04\x80\x80\x19\x06\x12\x91\x01\n\x1aUnregisterForNoti\
    fications\x125.uprotocol.core.usubscription.v3.NotificationsRequest\x1a6\
    .uprotocol.core.usubscription.v3.NotificationsResponse\"\x04\x80\x80\x19\
    \x07\x12\x8d\x01\n\x10FetchSubscribers\x128.uprotocol.core.usubscription\
    .v3.FetchSubscribersRequest\x1a9.uprotocol.core.usubscription.v3.FetchSu\
    bscribersResponse\"\x04\x80\x80\x19\x08\x12l\n\x05Reset\x12-.uprotocol.c\
    ore.usubscription.v3.ResetRequest\x1a..uprotocol.core.usubscription.v3.R\
    esetResponse\"\x04\x80\x80\x19\t\x1aF\xea\xf9\x18\x12core.usubscription\
    \xe0\xf9\x18\0\xf8\xf9\x18\0\x92\xfa\x18\x20\x08\x80\x80\x02\x12\x12Subs\
    criptionChange\x1a\x06Update\xf0\xf9\x18\x03BC\n+org.eclipse.uprotocol.c\
    ore.usubscription.v3B\x12USubscriptionProtoP\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::uri::file_descriptor().clone());
            deps.push(super::uoptions::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(20);
            messages.push(SubscribeAttributes::generated_message_descriptor_data());
            messages.push(SubscriberInfo::generated_message_descriptor_data());
            messages.push(SubscriptionStatus::generated_message_descriptor_data());
            messages.push(EventDeliveryConfig::generated_message_descriptor_data());
            messages.push(SubscriptionRequest::generated_message_descriptor_data());
            messages.push(SubscriptionResponse::generated_message_descriptor_data());
            messages.push(UnsubscribeRequest::generated_message_descriptor_data());
            messages.push(UnsubscribeResponse::generated_message_descriptor_data());
            messages.push(FetchSubscribersRequest::generated_message_descriptor_data());
            messages.push(FetchSubscribersResponse::generated_message_descriptor_data());
            messages.push(Subscription::generated_message_descriptor_data());
            messages.push(FetchSubscriptionsRequest::generated_message_descriptor_data());
            messages.push(FetchSubscriptionsResponse::generated_message_descriptor_data());
            messages.push(NotificationsRequest::generated_message_descriptor_data());
            messages.push(NotificationsResponse::generated_message_descriptor_data());
            messages.push(Update::generated_message_descriptor_data());
            messages.push(PassiveMode::generated_message_descriptor_data());
            messages.push(ResetRequest::generated_message_descriptor_data());
            messages.push(ResetResponse::generated_message_descriptor_data());
            messages.push(reset_request::Reason::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(subscription_status::State::generated_enum_descriptor_data());
            enums.push(update::Resources::generated_enum_descriptor_data());
            enums.push(reset_request::reason::Code::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
